{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.jsx","hooks/useFetchGifs.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","cat","alert","type","value","onChange","target","getGifs","category","a","URL","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","propTypes","PropTypes","string","isRequired","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGVC,mBAAS,IAHC,mBAGvCC,EAHuC,KAG3BC,EAH2B,KA0B9C,OAEI,sBAAMC,SAlBW,SAAAC,GACjBA,EAAEC,iBAGwB,KAAtBJ,EAAWK,QAMfP,GAAc,SAAAQ,GAAG,OAAKN,GAAL,mBAAoBM,OAGrCL,EAAc,KARVM,MAAM,kCAaV,SACI,uBACIC,KAAK,OACLC,MAAOT,EACPU,SA1BS,SAAAP,GACjBF,EAAcE,EAAEQ,OAAOF,a,+CCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DACD,mCACZC,EAFa,iDAEyCF,EAFzC,6BACD,oCADC,SAGKG,MAAMD,GAHX,cAGbE,EAHa,gBAISA,EAAKC,OAJd,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAUD,EAAIC,GACdC,MAAUF,EAAIE,MACdC,IAAUH,EAAII,OAAOC,iBAAiBF,QAV3B,kBAeZL,GAfY,4CAAH,sDAkBpBR,EAAQgB,UAAY,CAChBf,SAAUgB,IAAUC,OAAOC,YCjBxB,IAAMC,EAAe,SAAEnB,GAAe,IAAD,EAEdd,mBAAS,CAC/BoB,KAAM,GACNc,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAU,WACNxB,EAASC,GACJwB,MAAK,SAAAC,GACFH,EAAS,CACLhB,KAAKmB,EACLL,SAAQ,SAGrB,CAAEpB,IAIEqB,GAMXF,EAAaJ,UAAY,CACrBf,SAAUgB,IAAUC,OAAOC,YC3BxB,IAAMQ,EAAc,SAAC,GAAoB,IAAlBf,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEjC,OACI,sBAAKe,UAAU,yCAAf,UACI,qBAAKC,IAAKhB,EAAKiB,IAAKlB,IACpB,4BAAIA,QCFHmB,EAAU,SAAC,GAAkB,IAAhB9B,EAAe,EAAfA,SAAe,EAEXmB,EAAanB,GAA/BM,EAF6B,EAE7BA,KAAMc,EAFuB,EAEvBA,QAEd,OACI,qCACI,mCAAOpB,EAAP,OACEoB,EAAU,aACR,qBAAKO,UAAU,YAAf,SAGQrB,EAAKE,KAAI,SAAAC,GAAG,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aCmB1BqB,EAlCM,WAAI,MAGe7C,mBAAS,CAAC,cAHzB,mBAGd8C,EAHc,KAGF/C,EAHE,KAarB,OACF,qCACC,8CAES,cAAC,EAAD,CAAaA,cAAgBA,IACtC,uBACS,6BAEQ+C,EAAWxB,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCtBjCiC,IAASC,OACR,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.119da4c3.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    //estado local de este componente\n    const [inputValue, setInputValue] = useState('');\n\n    // handleChange\n    const handleChange = e => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        // Validamos si input viene vacio\n        if( inputValue.trim() === '' ){\n            alert('El input no puede estar vacio');\n            return;\n        }\n\n        // aÃ±adimos una nueva categoria\n        setCategories(cat => [inputValue, ...cat]);\n\n        // Limpiamos el input\n        setInputValue('');\n    }\n\n    return (\n        \n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleChange }\n            />\n        </form>\n    )\n}\n\n// Hacemos que setCategories sea un prop requerido\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}","import PropTypes from 'prop-types';\n\nexport const getGifs = async ( category ) => {\n    const API_KEY   = '0LQx5cOC6jCgJ7glKLq6eogRc8KKIGZg'\n    const URL       = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=${API_KEY}`\n    const resp      = await fetch(URL);\n    const { data }      = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id      : img.id,\n            title   : img.title,\n            url     : img.images.downsized_medium.url\n        }\n    });\n\n    //console.log(gifs);\n    return gifs;\n}\n\ngetGifs.propTypes = {\n    category: PropTypes.string.isRequired\n}","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\nimport PropTypes from 'prop-types';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=>{\n        getGifs( category )\n            .then(imgs => {\n                setState({\n                    data:imgs,\n                    loading:false\n                });\n            });\n    }, [ category ]);\n\n    \n\n    return state; // el state es: { data:[], loading:true };\n\n}\n\n// La categoria en este custom hook es realmente requerida ya que sin ella,\n// no puede realizar la consulta a la API. Resumen: el customHook no funciona\nuseFetchGifs.propTypes = {\n    category: PropTypes.string.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types';\n\nexport const GifGridItem = ({ title, url }) => {\n\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n\n\nGifGridItem.propTypes = {\n    title   : PropTypes.string.isRequired,\n    url     : PropTypes.string.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({ category }) => {\n\n    const { data, loading } = useFetchGifs(category);\n    \n    return (\n        <>\n            <h3> { category } </h3>\n            { loading ? \"loading...\" : \n                <div className=\"card-grid\">\n\n                    { \n                        data.map(img => \n                            <GifGridItem \n                                key={img.id} \n                                {...img}\n                            />\n                        ) \n                    }\n\n\n                </div>\n            }\n        </>\n    )\n}\n\nGifGrid.propTypes = {\n    category : PropTypes.string.isRequired\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = ()=>{\n\n    //const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"];\n    const [categories, setCategories] = useState([\"One Punch\"]);\n\t\n    //const handleAdd = () => {\n    //    setCategories([\n    //        ...categories,\n    //        \"new_element\"\n    //    ]);\n    //}\n\n\n    return (\n\t\t<>\n\t\t\t<h2>GifExpertApp</h2>\n            {/* el setCategories se pasa como prop al componente AddCategory */}\n            <AddCategory setCategories={ setCategories }/>\n\t\t\t<hr />\n            <ol>\n                {\n                    categories.map(category =>( \n                        <GifGrid \n                            key={category} \n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n\t\t</>\n\t);\n\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n\t<GifExpertApp />,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}